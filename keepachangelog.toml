# configuration file for git-cliff (0.1.0)

[changelog]
# changelog header
header = """
# Changelog\n
All notable changes to this project will be documented in this file.
The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/).\n
"""
# template for the changelog body
# https://tera.netlify.app/docs/#introduction
body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [Unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | upper_first }}
    {% for commit in commits %}
        - {% if commit.breaking %}[**breaking**] {% endif %}{{ commit.message | upper_first }}\
    {% endfor %}
{% endfor %}\n
"""
# remove the leading and trailing whitespace from the template
trim = true
# changelog footer
footer = """
OverIT s.p.a.

Example: GC-916 Changelog automatic generation

<!-- generated by git-cliff -->
"""

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# process each line of a commit as an individual commit
split_commits = false
# regex for parsing and grouping commits
commit_parsers = [
#    { message = "^.*: add", group = "Added"},
    { message = "^[aA]dd!?:.*", group = "Added"},
#    { message = "^.*: support", group = "Added"},
    { message = "^[sS]upport!?:.*", group = "Added"},
#    { message = "^.*: deprecate", group = "Deprecated"},
    { message = "^[dD]eprecate!?:.*", group = "Deprecated"},
#    { message = "^.*: remove", group = "Removed"},
    { message = "^[rR]emove!?:.*", group = "Removed"},
#    { message = "^.*: delete", group = "Removed"},
    { message = "^[dD]elete!?:.*", group = "Removed"},
#    { message = "^test", group = "Fixed"},
    { message = "^[tT]est", group = "Fixed"},
#    { message = "^fix", group = "Fixed"},
    { message = "^[fF]ix", group = "Fixed"},
#    { message = "^.*: sec", group = "Security"},
    { message = "^[sS]ec", group = "Security"},
#    { message = "^.*", group = "Changed"},
    { message = "^[cC]hange!?:.*", group = "Changed"},
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# filter out the commits that are not matched by commit parsers
filter_commits = true
# glob pattern for matching git tags
tag_pattern = "v[0-9]*"
# regex for skipping tags
skip_tags = "v0.1.0-beta.1"
# regex for ignoring tags
ignore_tags = ""
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"